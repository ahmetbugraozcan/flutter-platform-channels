// Autogenerated from Pigeon (v4.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif


/// Generated class from Pigeon.

///Generated class from Pigeon that represents data sent in messages.
struct Cat {
  var name: String? = nil
  var age: Int32? = nil

  static func fromMap(_ map: [String: Any?]) -> Cat? {
    let name = map["name"] as? String 
    let age = map["age"] as? Int32 

    return Cat(
      name: name,
      age: age
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "name": name,
      "age": age
    ]
  }
}
private class CatApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Cat.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class CatApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Cat {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class CatApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return CatApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return CatApiCodecWriter(data: data)
  }
}

class CatApiCodec: FlutterStandardMessageCodec {
  static let shared = CatApiCodec(readerWriter: CatApiCodecReaderWriter())
}

///Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CatApi {
  func getCats() -> [Cat?]
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CatApiSetup {
  /// The codec used by CatApi.
  static var codec: FlutterStandardMessageCodec { CatApiCodec.shared }
  /// Sets up an instance of `CatApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CatApi?) {
    let getCatsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CatApi.getCats", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCatsChannel.setMessageHandler { _, reply in
        let result = api.getCats()
        reply(wrapResult(result))
      }
    } else {
      getCatsChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
